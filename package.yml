AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Gales Sales API Lambda Server
Parameters:
  ParamProjectName:
    Type: String
    Description: Name of the API - used to generate unique names for resources
    MinLength: 3
    MaxLength: 20
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9_-]*$
  ParamAccountId:
    Type: String
    Description: Account ID
  ParamSSMPath:
    Type: String
    Description: Second path part in ssmParams
    Default: gsales
  ParamENV:
    Type: String
  ParamKMSKeyID:
    Description: KMS key id
    Type: String
  ParamThundraKey:
    Description: thundra.io API key
    Type: String
Resources:
  Api:
    EndpointConfiguration: REGIONAL
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn:
              Fn::GetAtt:
              - AuthLambda
              - Arn
            Identity:
              ReauthorizeEvery: 300
  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri: s3://gsales-api/lambda/44ce0ccf414acc020c47f4f95cc6ccb4
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Timeout: 10
      MemorySize: 512
      Tracing: Active
      Environment:
        Variables:
          NODE_ENV: prod
          Stage: prod
          thundra_apiKey:
            Ref: ParamThundraKey
          thundra_agent_lambda_report_cloudwatch_enable: true
          thundra_lambda_warmup_warmupAware: true
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: Api
            Path: /
            Method: GET
            Auth:
              Authorizer: NONE
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId:
              Ref: Api
            Path: '{proxy+}'
            Method: ANY
            Auth:
              Authorizer: LambdaTokenAuthorizer
        Options:
          Type: Api
          Properties:
            RestApiId:
              Ref: Api
            Path: '{proxy+}'
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      VpcConfig:
        SecurityGroupIds:
        - sg-5afb2932
        - sg-8f6baee7
        SubnetIds:
        - subnet-0da8d176
        - subnet-7f092816
      Tags:
        BillTo: Gales
  AuthLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://gsales-api/lambda/44ce0ccf414acc020c47f4f95cc6ccb4
      Handler: authorizer/index.handler
      Runtime: nodejs10.x
      Environment:
        Variables:
          thundra_apiKey:
            Ref: ParamThundraKey
          thundra_agent_lambda_report_cloudwatch_enable: true
          thundra_lambda_warmup_warmupAware: true
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${ParamProjectName}-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: FunctionLogAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
      - PolicyName: FunctionXRayAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
            Effect: Allow
            Resource: '*'
      - PolicyName: FunctionParameterAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - ssm:GetParametersByPath
            Effect: Allow
            Resource:
              Fn::Sub: arn:aws:ssm:${AWS::Region}:${ParamAccountId}:parameter/${ParamENV}/${ParamSSMPath}*
      - PolicyName: FunctionKMSAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - kms:Decrypt
            - kms:DescribeKey
            Resource:
              Fn::Sub: arn:aws:kms:${AWS::Region}:${ParamAccountId}:key/${ParamKMSKeyID}
      - PolicyName: FunctionVPCAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeNetworkInterfaces
            Effect: Allow
            Resource: '*'
Outputs:
  ApiId:
    Description: API ID
    Value:
      Ref: Api
  ApiUrl:
    Description: API endpoint URL for Prod environment
    Value:
      Fn::Sub: https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  LambdaARN:
    Description: The Lambda Arn
    Value:
      Fn::GetAtt:
      - Lambda
      - Arn
  AuthLambdaARN:
    Description: The Authorization Lambda Arn
    Value:
      Fn::GetAtt:
      - AuthLambda
      - Arn
